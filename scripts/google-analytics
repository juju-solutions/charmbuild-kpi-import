#!/usr/bin/env python3

"""Google Analytics to Prometheus metrics exporter.

Based on the Google Analytics Reporting API v4 Python quickstart:
https://developers.google.com/analytics/devguides/reporting/core/v4/quickstart/service-py.

Check the online API docs:
https://developers.google.com/analytics/devguides/reporting/core/v4/rest/v4/reports/batchGet

the interactive API explorer:
https://developers.google.com/apis-explorer/#p/analyticsreporting/v4/analyticsreporting.reports.batchGet.

and the dimensions & metrics explorer:
https://developers.google.com/analytics/devguides/reporting/core/dimsmets

"""

import base64
import configparser
import httplib2
import json
import os
import sys
import pprint

from apiclient.discovery import build
from oauth2client.service_account import ServiceAccountCredentials
from prometheus_client import CollectorRegistry, Gauge, push_to_gateway  # noqa


START_DATE = '2010-01-01'


def get_config():
    """
    Get configuration options for this script
    """
    pkg = 'charmbuild-kpi-import'
    config = configparser.SafeConfigParser()
    conffiles = [
        '/etc/{}.ini'.format(pkg),
        os.path.expanduser('~/.{}.ini'.format(pkg)),
        '{}.ini'.format(pkg),
    ]
    config.read(conffiles)
    return config['DEFAULT']


def initialize_analyticsreporting(config):
    """Initializes an analyticsreporting service object.

    Returns: analytics an authorized analyticsreporting service object.
    """
    creds_blob = config['ga-creds']
    creds_data = json.loads(base64.b64decode(creds_blob).decode('utf8'))
    scopes = ['https://www.googleapis.com/auth/analytics.readonly']
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_data,
                                                                   scopes)
    http = credentials.authorize(httplib2.Http())

    # Build the service object.
    analytics = build('analytics', 'v4', http=http)

    return analytics


def gather_users(analytics, view_id, registry):
    total_users_gauge = Gauge(
        name='ga_charmbuild_users_total',
        documentation='Total number of users.',
        registry=registry,
    )
    new_users_gauge = Gauge(
        name='ga_charmbuild_users_new',
        documentation='Total number of first-time users.',
        registry=registry,
    )
    data = analytics.reports().batchGet(
        body={
            'reportRequests': [{
                'viewId': view_id,
                'dateRanges': [{
                    'startDate': START_DATE,
                    'endDate': 'today',
                }],
                'metrics': [
                    {'expression': 'ga:users'},
                    {'expression': 'ga:newUsers'},
                ],
                'dimensions': [
                    {'name': 'ga:source'},
                ],
            }]
        }).execute()
    total_users, new_users = data['reports'][0]['data']['totals'][0]['values']
    total_users_gauge.set(total_users)
    new_users_gauge.set(new_users)


def gather_charms(analytics, view_id, registry):
    charm_gauge = Gauge(
        name='ga_charmbuild_charm_builds',
        documentation='Number of builds per charm.',
        labelnames=['charm'],
        registry=registry,
    )
    data = analytics.reports().batchGet(
        body={
            'reportRequests': [{
                'viewId': view_id,
                'dateRanges': [{
                    'startDate': START_DATE,
                    'endDate': 'today',
                }],
                'metrics': [
                    {'expression': 'ga:totalEvents'},
                ],
                'dimensions': [
                    {'name': 'ga:eventLabel'},
                ],
                'dimensionFilterClauses': [
                    {'operator': 'AND',
                     'filters': [
                         {'dimensionName': 'ga:eventCategory',
                          'operator': 'EXACT',
                          'expressions': ['charm']},
                         {'dimensionName': 'ga:eventLabel',
                          'not': True,
                          'operator': 'EXACT',
                          'expressions': ['(not set)']},
                     ]},
                ],
            }]
        }).execute()
    for row in data['reports'][0]['data']['rows']:
        charm_name = row['dimensions'][0]
        build_count = row['metrics'][0]['values'][0]
        charm_gauge.labels(charm_name).set(build_count)


def gather_layers(analytics, view_id, registry):
    gauges = {
        'layer_total_builds': Gauge(
            name='ga_charmbuild_layer_total_builds',
            documentation='Total number of builds per layer',
            labelnames=['layer'],
            registry=registry,
        ),
        'layer_source_builds': Gauge(
            name='ga_charmbuild_layer_source_builds',
            documentation='Total number of builds per source (fetch vs local)',
            labelnames=['source'],
            registry=registry,
        ),
        'layer_local_builds': Gauge(
            name='ga_charmbuild_layer_local_builds',
            documentation='Number of local builds per layer',
            labelnames=['layer'],
            registry=registry,
        ),
        'layer_fetch_builds': Gauge(
            name='ga_charmbuild_layer_fetch_builds',
            documentation='Number of fetch builds per layer',
            labelnames=['layer'],
            registry=registry,
        ),
        'interface_total_builds': Gauge(
            name='ga_charmbuild_interface_total_builds',
            documentation='Total number of builds per interface',
            labelnames=['interface'],
            registry=registry,
        ),
        'interface_source_builds': Gauge(
            name='ga_charmbuild_interface_source_builds',
            documentation='Total number of builds per source (fetch vs local)',
            labelnames=['source'],
            registry=registry,
        ),
        'interface_local_builds': Gauge(
            name='ga_charmbuild_interface_local_builds',
            documentation='Number of local builds per interface',
            labelnames=['interface'],
            registry=registry,
        ),
        'interface_fetch_builds': Gauge(
            name='ga_charmbuild_interface_fetch_builds',
            documentation='Number of fetch builds per interface',
            labelnames=['interface'],
            registry=registry,
        ),
    }
    data = analytics.reports().batchGet(
        body={
            'reportRequests': [{
                'viewId': view_id,
                'dateRanges': [{
                    'startDate': START_DATE,
                    'endDate': 'today',
                }],
                'metrics': [
                    {'expression': 'ga:totalEvents'},
                ],
                'dimensions': [
                    {'name': 'ga:eventCategory'},
                    {'name': 'ga:eventLabel'},
                    {'name': 'ga:eventAction'},
                ],
                'dimensionFilterClauses': [
                    {'operator': 'AND',
                     'filters': [
                         {'dimensionName': 'ga:eventCategory',
                          'operator': 'IN_LIST',
                          'expressions': ['layer', 'interface']},
                         {'dimensionName': 'ga:eventLabel',
                          'not': True,
                          'operator': 'EXACT',
                          'expressions': ['(not set)']},
                     ]},
                ],
            }]
        }).execute()
    for row in data['reports'][0]['data']['rows']:
        layer_type = row['dimensions'][0]
        layer_name = row['dimensions'][1]
        build_source = row['dimensions'][2]
        build_count = int(row['metrics'][0]['values'][0])

        total_gauge = gauges['{}_total_builds'.format(layer_type)]
        source_gauge = gauges['{}_source_builds'.format(layer_type)]
        by_source_gauge = gauges['{}_{}_builds'.format(layer_type,
                                                       build_source)]

        total_gauge.labels(layer_name).inc(build_count)
        source_gauge.labels(build_source).inc(build_count)
        by_source_gauge.labels(layer_name).set(build_count)


def gather_series(analytics, view_id, registry):
    gauge = Gauge(
        name='ga_charmbuild_series_builds',
        documentation='Number of builds per series.',
        labelnames=['series'],
        registry=registry,
    )
    data = analytics.reports().batchGet(
        body={
            'reportRequests': [{
                'viewId': view_id,
                'dateRanges': [{
                    'startDate': START_DATE,
                    'endDate': 'today',
                }],
                'metrics': [
                    {'expression': 'ga:totalEvents'},
                ],
                'dimensions': [
                    {'name': 'ga:dimension1'},
                ],
                'dimensionFilterClauses': [
                    {'operator': 'AND',
                     'filters': [
                         {'dimensionName': 'ga:eventCategory',
                          'operator': 'EXACT',
                          'expressions': ['charm']},
                         {'dimensionName': 'ga:eventLabel',
                          'not': True,
                          'operator': 'EXACT',
                          'expressions': ['(not set)']},
                         {'dimensionName': 'ga:dimension1',
                          'not': True,
                          'operator': 'EXACT',
                          'expressions': ['ubuntu']},
                     ]},
                ],
            }]
        }).execute()
    for row in data['reports'][0]['data']['rows']:
        series_name = row['dimensions'][0]
        build_count = row['metrics'][0]['values'][0]
        gauge.labels(series_name).set(build_count)


def gather_versions(analytics, view_id, registry):
    gauge = Gauge(
        name='ga_charmbuild_versions_users',
        documentation='Number of users on each version of charm-tools.',
        labelnames=['version'],
        registry=registry,
    )
    data = analytics.reports().batchGet(
        body={
            'reportRequests': [{
                'viewId': view_id,
                'dateRanges': [{
                    'startDate': START_DATE,
                    'endDate': 'today',
                }],
                'metrics': [
                    {'expression': 'ga:users'},
                ],
                'dimensions': [
                    {'name': 'ga:appVersion'},
                ],
            }]
        }).execute()
    for row in data['reports'][0]['data']['rows']:
        version = row['dimensions'][0]
        users = row['metrics'][0]['values'][0]
        gauge.labels(version).set(users)


def main():
    config = get_config()

    registry = CollectorRegistry()
    analytics = initialize_analyticsreporting(config)

    view_id = config['ga-view-id']
    gather_users(analytics, view_id, registry)
    gather_charms(analytics, view_id, registry)
    gather_layers(analytics, view_id, registry)
    gather_series(analytics, view_id, registry)
    gather_versions(analytics, view_id, registry)

    if '--debug' not in sys.argv:
        push_to_gateway(config['push-gateway'],
                        job='charmbuild-google-analytics',
                        registry=registry)
    else:  # Debugging enabled.
        pprint.pprint([(x.name, x.samples) for x in registry.collect()])


if __name__ == '__main__':
    main()
