#!/usr/bin/python
"""
Copyright (C) 2016 Canonical, Ltd.
Written by Nick Moffitt and Jacek Nykis
Based on check_list_settings.py by James Troup
"""

import sys
import re

# Add mailman libraries to PYTHONPATH
sys.path.insert(0, "/var/lib/mailman")

from Mailman import MailList
from Mailman import Utils
from Mailman.Archiver.HyperArch import HyperArchive


def parse_args():
    import argparse

    parser = argparse.ArgumentParser(
            usage=__doc__,
            description='Check a Mailman mailing list for size and number of '
                        'internal and external members.',
            formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('filters', help='list of filters for mailing list name', nargs='*', default=False)
    return parser.parse_args()


def get_list_names(filters):
    tmp = Utils.list_names()
    if filters:
        lists = []
        for f in filters:
            lists.extend([l for l in tmp if re.search(f, l)])
    else:
        lists = tmp

    lists.sort()
    return lists


def get_list(listname):
    mlist = MailList.MailList(listname, lock=0)
    list_domain = mlist.getListAddress().split('@')[1]
    members = mlist.getRegularMemberKeys()
    members.extend(mlist.getDigestMemberKeys())
    hyper = HyperArchive(mlist)
    list_size = sum(hyper.database.numArticles(ar) for ar in hyper.archives)

    stats = {'list_name': listname,
             'list_domain': list_domain,
             'list_size': list_size,
             'internal_subscribers': 0,
             'external_subscribers': 0}

    for member in members:
        internal_member = member.split('@')[1] == 'canonical.com'
        if internal_member:
            stats['internal_subscribers'] += 1
        else:
            stats['external_subscribers'] += 1

    return stats


def main():
    args = parse_args()
    mailinglists = []
    for l in get_list_names(args.filters):
        mailinglists.append(get_list(l))

    print('# TYPE mailman_list_members gauge')
    for l in mailinglists:
        metrics = 'mailman_list_members{{list_name="{list_name}",list_domain="{list_domain}",subscriber_type="internal"}} {internal_subscribers}\n'.format(**l)
        metrics += 'mailman_list_members{{list_name="{list_name}",list_domain="{list_domain}",subscriber_type="external"}} {external_subscribers}'.format(**l)
        print(metrics)

    print('# TYPE mailman_list_volume counter')
    for l in mailinglists:
        if 'list_size' in l:
            metrics = 'mailman_list_size{{list_name="{list_name}",list_domain="{list_domain}"}} {list_size}'.format(**l)
            print(metrics)


if __name__ == '__main__':
    main()
