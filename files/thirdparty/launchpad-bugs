#!/usr/bin/env python

"""Launchpad KPI metrics gatherer script.

Gathers statistics of Launchpad bugs and bug reporters relevant
to snappy and pushes them to the prometheus gateway.

Copyright (c) 2016 Canonical, Ltd.
Authors: Ryan Finnie, Manuel Seelaus, Paul Gear
"""

from launchpadlib.launchpad import Launchpad
from launchpadlib.uris import lookup_service_root
from launchpadlib import credentials
from prometheus_client import CollectorRegistry, Gauge, push_to_gateway

import configparser
import os
import sys


class ShutUpAndTakeMyTokenAuthorizationEngine(credentials.RequestTokenAuthorizationEngine):

    """This stub class prevents launchpadlib from nulling out consumer_name
    in its demented campaign to force the use of desktop integration. """

    def __init__(self, service_root, application_name=None, consumer_name=None,
                 credential_save_failed=None, allow_access_levels=None):
        super(ShutUpAndTakeMyTokenAuthorizationEngine, self).__init__(
              service_root, application_name, consumer_name,
              credential_save_failed)


def launchpad_login(pkg):
    """Log into Launchpad API with stored credentials."""
    creds_dir = os.path.expanduser(os.path.join('~', '.' + pkg))
    if not os.path.exists(creds_dir):
        os.makedirs(creds_dir, 0o700)
    os.chmod(creds_dir, 0o700)
    api_endpoint = lookup_service_root('production')
    consumer_name = pkg
    return Launchpad.login_with(
        consumer_name=consumer_name,
        credentials_file=os.path.join(creds_dir, 'launchpad.credentials'),
        service_root=api_endpoint,
        version='devel',
        authorization_engine=ShutUpAndTakeMyTokenAuthorizationEngine(
            service_root=api_endpoint,
            consumer_name=consumer_name,
        ),
    )        


def count_distro_bugs(distro, package):
    """Return the number of bugs for a given package."""
    source = distro.getSourcePackage(name=package)
    bugs = source.searchTasks()
    return len(bugs)


def gather_tagged_bugs(registry, projects):
    """Gather bugs tagged `snapd-interface` for a list of projects."""
    gauge = Gauge(
        'launchpad_snappy_tag_bugs',
        'Number of open bugs on the snappy project with a given tag',
        ['project', 'bug_tag'],
        registry=registry,
    )
    for project in projects:
        bugs = project.searchTasks(tags=['snapd-interface'])
        gauge.labels(project.name, 'snapd-interface').set(len(bugs))


def gather_package_bugs(registry, distro):
    """Gather package bugs for snapcraft, snapd, & ubuntu-snappy."""
    package_bugs = Gauge(
        'launchpad_ubuntu_package_bugs',
        'Number of open bugs on the ubuntu distro for a given package',
        ['package'],
        registry=registry,
    )
    package_bugs.labels('snapcraft').set(count_distro_bugs(distro, 'snapcraft'))
    package_bugs.labels('snapd').set(count_distro_bugs(distro, 'snapd'))
    package_bugs.labels('ubuntu-snappy').set(count_distro_bugs(distro, 'ubuntu-snappy'))


def gather_project_bugs(registry, projects):
    """Gather bugs for a list of projects."""
    gauge = Gauge(
        'launchpad_project_bugs',
        'Number of open bugs for a given project',
        ['project'],
        registry=registry,
    )
    for project in projects:
        gauge.labels(project.name).set(len(project.searchTasks()))


def gather_bug_reporters(registry, projects, members):
    """Gather snappy bugs by reporter type for a list of projects."""
    gauge = Gauge(
        'launchpad_snappy_bug_reporters',
        'Number of reporters of open bugs on snappy projects who are '
        'or are not members of ~canonical',
        ['project', 'reporter_type'],
        registry=registry,
    )
    for project in projects:
        snappy_bugs = project.searchTasks()
        canonical_bugs = []
        for member in members:
            if member.account_status != 'Active':
                continue
            bugs = project.searchTasks(bug_reporter=member)
            canonical_bugs.extend(bugs)

        snappy_bug_count = len(snappy_bugs)
        canonical_count = len(canonical_bugs)
        non_canonical_count = snappy_bug_count - canonical_count

        gauge.labels(project.name, 'internal').set(canonical_count)
        gauge.labels(project.name, 'external').set(non_canonical_count)


def get_push_gateway(pkg, name):
    """Find push gateway in config file."""
    config = configparser.ConfigParser()
    conffiles = [
        '/etc/{}.ini'.format(pkg),
        os.path.expanduser('~/.{}.ini'.format(pkg)),
        '{}.ini'.format(pkg),
    ]
    config.read(conffiles)
    return config[name]['push-gateway']


if __name__ == '__main__':
    pkg = 'snappy-kpi-scripts'
    name = os.path.basename(sys.argv[0])
    gateway = get_push_gateway(pkg, name)
    launchpad = launchpad_login(pkg)
    snapcraftproj = launchpad.projects['snapcraft']
    snappyproj = launchpad.projects['snappy']
    distro = launchpad.distributions['ubuntu']
    members = launchpad.people['canonical'].members

    registry = CollectorRegistry()
    try:
        gather_package_bugs(registry, distro)
        gather_project_bugs(registry, [snapcraftproj, snappyproj])
        gather_tagged_bugs(registry, [snapcraftproj, snappyproj])
        gather_bug_reporters(registry, [snapcraftproj, snappyproj], members)
    finally:
        push_to_gateway(gateway, job=name, registry=registry)
